"""
Django settings for trimly project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import os
from pathlib import Path
from dotenv import load_dotenv
from urllib.parse import urlparse

load_dotenv()  # âœ… Loads your .env variables

# Optional helper to parse DATABASE_URLs. This import is optional in requirements; if it's
# available we prefer it because it handles more edge cases.
try:
    import dj_database_url  # type: ignore
except Exception:
    dj_database_url = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0hry7ji&+go(*$b@tmf5(di70t!@_q1krdkx38osnr=s4@l19*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'trimly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trimly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration is handled below (supports DB_URL/session pooler or individual vars)
# Database configuration
# Priority order:
# 1. Use DB_URL (session pooler or standard connection string). Example:
#    DB_URL=postgresql://user:password@host:5432/dbname
#    When using a session pooler (like Supabase pooler) provide the pooler URL here.
#    Optional variables:
#      - DB_CONN_MAX_AGE (seconds, default 600) to keep DB connections open for reuse
#      - DB_SSLMODE (e.g. require) or DB_SSL=true to enforce SSL for cloud providers
# 2. Use individual DB_NAME/DB_USER/DB_PASSWORD/DB_HOST/DB_PORT variables (transaction style)
# 3. Fallback to local SQLite for development

db_url = os.getenv('DB_URL') or os.getenv('DATABASE_URL')
if db_url:
    # Prefer dj_database_url if installed because it handles many edge cases.
    if dj_database_url:
        DATABASES = {
            'default': dj_database_url.parse(db_url, conn_max_age=int(os.getenv('DB_CONN_MAX_AGE', 600)))
        }
    else:
        # Minimal manual parse for a postgres URL: postgres://user:pass@host:port/dbname
        parsed = urlparse(db_url)
        db_name = parsed.path[1:] if parsed.path.startswith('/') else parsed.path
        db_user = parsed.username
        db_password = parsed.password
        db_host = parsed.hostname
        db_port = parsed.port or '5432'

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': db_name,
                'USER': db_user,
                'PASSWORD': db_password,
                'HOST': db_host,
                'PORT': db_port,
                # Keep connections open for reuse (session pooler benefits from longer conn lifetime)
                'CONN_MAX_AGE': int(os.getenv('DB_CONN_MAX_AGE', 600)),
            }
        }

    # If the host looks like a cloud provider that requires SSL (e.g., supabase), enforce sslmode
    host = DATABASES['default'].get('HOST')
    if host and ('supabase' in host or 'rds' in host or os.getenv('DB_SSL', 'true').lower() == 'true'):
        # Use OPTIONS for psycopg/ Django >= 2.0
        DATABASES['default'].setdefault('OPTIONS', {})
        DATABASES['default']['OPTIONS'].setdefault('sslmode', os.getenv('DB_SSLMODE', 'require'))

elif all(os.getenv(var) for var in ['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST']):
    # Transaction-style individual environment variables
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'CONN_MAX_AGE': int(os.getenv('DB_CONN_MAX_AGE', 0)),
        }
    }
else:
    # Fallback to SQLite for development if no PostgreSQL credentials are configured
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

import os

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'main', 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

